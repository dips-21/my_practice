1) What is TestNG? (test next generation)
-> TestNG is a tesing framework designed to simplify a broad range of testing needs, from unit testing to integration
testing.

2) Advantages of TestNG?
-> TestNg provides parallel execution of test methods.
   It allows to define dependency of one test method over other method.
   It allows to assign priority to test methods.
   It allows grouping of test methods into test groups.
   It has support for parameterizing test cases using @Parameters annotation.
   It allows data driven testing using @DataProvider annotations.
   It has different assertions that helps in checking the expected and actual results.
   Detailed HTML reports.

3) What are the annotations available in testNG?
-> @BeforeTest
   @AfterTest
   @BeforeClass
   @AfterClass
   @BeforeMethod
   @AfterMethod
   @BeforeSuite
   @AfterSuite
   @BeforeGroups
   @AfterGroups
   @Test

4) Can you arrange the below testng.xml tags from parent to child?
 <test>  <suite>  <class>  <method>  <classes>
-> xml schema that is xml version and then doctype suite
<Suite>
   <test>
   <classes>
   <class>
   <method>

5)How to create and run testng.xml file?
-> In testng framework , we need to create testng.xml file to create and handle multiple test classes. we do configue our
test run , set test dependency, inclue or exclude any test, method, class or package and set priority in the xml file.

right click on main resources or package file then new file give the file name testng.xml
through eclipse testng.xml file and run it  for this java build path add testng libraries.

6)What is the importance of testNG.xml file?
-> In a SWD TestNG project, we use testng.xml file to configue the complete test suite in a single file, some of the featues
are as follows,
   TestNG.xml file allows to include or exclude execution of test methods and test groups.
   It allows to pass parameters to the test cases.
   Allows to add group dependencies.
   Allows to add priorities to the test cases.
   Allows to configure parallel execution of test cases.
   Allows to parameterize the test cases.

7) How to pass parameter through testNG.xml file to a test case?
-> We could define the parameters in the testng.xml file and then reference those parameters in the source files.

Create a java test class, say , parameterizedTest.java and add a method say parameteizedTest() to the test class. This
method takes a string as input parameter. Add the annotations @Parameter("browser") to this method.
// TestNG interview Questions
public class ParameterizedTest{
@Test
@Parameter("browser")
public void parameterizedTest(String browser){
   if(browser.equals("firefox")){
   System.out.println("Open firefox Driver ");
   }else if(browser.equals("chrome")){
    System.out.println("Open chrome Driver ");
   }
  }
 } The parameter would be passed a value from testNG.xml, whic we will see in the next step.

 we could set the parameter using the below syntax in the testng.xml file,
 <parameter name="browser" value="firefox">
 Here name attribute represents the parameter name and value represents the value of that parameter.

8) What is TestNG Assert and list out common TestNG annotations?
-> TestNg asserts help us to verify the condition of the test in the middle of the test run. Based on the TestNg assetions,
we will consider a successful test only if it is completed the test run without throwing any exception.
Some of the common assertions supported by TestNg are-
   > assertEqual(String actual,String expected)
   > assertEqual(String actual,String expected,String message)
   > assertEquals(boolean actual,boolean expected)
   > aseertTrue(condition)
   > assertTrue(condition,message)
   > assertFalse(condition)
   > assertFalse(condition,message)

9) What is Soft Assert in TestNG?
-> Soft Assert collects errors during @Test.Soft assert does not throw an exception when an assert fails and would continue
with the next step after the assert statement.
If there is any exception and you want to throw it then you need to use assertAll() method as a last statement in the
@Test as it is.

10) What is Hard Assert in TestNG?
-> Hard assert throws an AssertException immediately when an assert statement fails and test suite continues with next @Test.

11) What is exception test in TestNG?
-> TestNG gives an option for tracing the Exception handling of code. You can verify whether a code throws the expected
exception or not.The expected to validate while running the test case is mentioned using the expectedException attribute
value along with @Test annotation.

12) How to set test case priority in TestNG?
-> We use priority attribute to the @Test annotations. In case priority is not set then the test scripts execute in
alphabetical order.

package TestNG;
import.org.testng.annotations.*;
public class PriorityTestCases{
@Test(priority=0)
public void testCase1(){
System.out.println("Test case 1");
}
@Test(priority=1)
public void testCase2(){
System.out.println("Test case 2");
}
}
output -> Test case 1
          Test case 2

13) What is parameterized testing in TestNG?
-> Parameterized tests allows developers to run the same test over and over again using diff values.
There are 2 ways to set these parameters:-
 Using testng.xml
 Using Data Providers

14) How can we create data driven framework using TestNG?
-> By using @DataProvider annotations , we can create a Data Driven Framework.

@DataProvider(name="getData")
piblic Object[][] getData(){
Object[][] data = new Object [2][2];

data[0][0]="FirstUid";
data[0][1]="FirstPWD";

data[1][0]="SecondUid";
data[1][1]="SecondPWD";

return data;
}

15) How to run a group of test cases using TestNG?  - not IMP
-> TestNG allows you to perform sophisticated grouping of test methods.Not only you can declare that methods belong to
groups,but you can also specify groups that contain other groups.Then TestNG can be invoked and asked to include a
certain set of groups(or regular expressions) while excluding another set.This gives you maximum flexibility in how you
partition your tests and doesnt require you to recompile anything if you want to run two different sets of tests back to back.
Groups are specified in your testng.xml file and can be found either under the <test> or <suite> tag. Groups specified in
the <suite> tag apply to all the <test> underneath.

@Test(groups={"smokeTest","functionalTest"})
public void loginTest(){
System.out.println("Logged in successfully");
}

16) How to create group of groups in TestNG?
-> Groups can also include other group. These groups are called MetaGroups. for ex. you might want to define a group all
that includes smokeTest and functionalTest. Lets modify our testng.xml as follows;
<groups>
  <define name="all">
     <include name="smokeTest"/>
     <include name="functionalTest"/>
  </define>
 <run>
  <include name="all"/>
 </run>
</groups>

17) How to run test cases in parellel using TestNG?
-> We can use "parallel" attribute in testng.xml to accomplish parallel test execution in TestNG. The parallel attribute
of suite tag can accept four values:
   > tests - All the test cases inside <test> tag of testng.xml file will run parallel.
   > classes - All the test cases inside a java class will run parallel.
   > methods - All the methods with @Test annotation will execute parallel.
   > instances - Test cases in same instance will execute parallel but two methods of two different instances will run in
                 different thread.
      <suite name ="softwareTestingMaterial" parallel="methods">

18) How to exclude a particular test method from a test case execution?
-> By adding the exclude tag in the testng.xml
       <classes>
       <class name ="put here TestCaseName">
       <methods>
       <exclude name ="TestMethod name to exclude"/>
       </method>
       </class>
       </classes>

19) How to exclude particular test group from a test case execution?
-> By adding the exclude tag in the testng.xml
    <groups>
    <run>
       <exclude name="TestGroupNameToEXclude"/>
    </run>
   </groups>

20) How to disable a test case in TestNG?
-> To disable the test case we use the parameter enabled = false to the @Test annotation.
@Test(enabled = false)

21) How to skip a @Tesy method from execution in TestNG?
-> By using throw a new SkipException()
Once Skip exception thrown, remaining part of that test method will not be executed and control will goes directly to next
test method execution.
throw new SkipException("Skipping - This is not ready for testing ");

22) How to ignore a test case in TestNG?
-> To ignore the test case we use the parameter enabled= false to the @Test annotations same like 20.

23) How TestNG allows to state dependencies?
-> TestNG allows two ways to declare the dependencies.
Using attribute dependsOnMethods in @Test annotations
Using attribute dependsOnGroups in @Test annotations.

24) What are the different ways to produce reports for TestNG results?
-> TestNG offers two ways to produce a report.
 Listeners implement the interface arg.testng.ITestListener and are notified in read time of when a test starts,passes
 and fails.
 Reporters implement the interface org.testng.IReporter and are notified when all the suites have been run by TestNG. The
 IReporter instance receives a list of objects that describe the entire test run.

25) What is the use of @Listener annotations in TestNG?
-> TestNG listeners are used to configure reports and logging. One of the most widely used listeners in TestNG is
ITestListener interface. It has methods like onTestStart, onTestSuccess, onTestFailure, onTestSkipped etc. We should
implement this interface creating a listener class of our own. Next we should add the listeners annotation (@Listeners) in
the class which was created.

26) How to write regular expression in testng.xml file to search @Test methods containing "smoke" keyword?
-> <methods>
     <include name=".*smoke.*"/>
   </methods>

27) What is the time unit we specify in test suites and test cases?
-> We specify the time unit in test suites and test cases is in milliseconds.

28) List out various ways in whic TestNG can be invoked?  (Timepass question)
-> Using Eclipse IDE
   Using maven/ant built tool
   From the command line
   Using Intellij IDE

29) How to run TestNG using command prompt?
->  c driver  then folder test folder then java / testng.jar using testng jar file .

30) What is the use of @Test(invocationCount=x)?
->   The invocation count attribute tells how many times TestNG should run a test method.
 @Test(invocationCount=10)
 public void testcase1(){
  ----
  }

31) What is the use of @Test(threadPoolSize=x)?
-> The threadPoolSize attribute tells to form a thread pool to run the test method through multiple threads.
Note : This attriute is ignored if invocationCount is not specified.
@Test(threadPoolSize=3 , <code class="plain">invocationCount=</code><code class="value">10</code>)
public void test1(){
----}

32) What does the test timeout mean in TestNG?
-> The maximum number of miliseconds a test case should take.
@Test(threadPoolSize=3, invocationCount=10, timeout=10000)
public void testCase1(){
--}
In this example the function testCase1 will be invoked ten times from three different threads. Additionally, a timeout
of 10secs guarantees that none of the threads will block on this thread forever.

33) What are @Factory and @DataProvider Annotations?
-> @Factory - A factory will execute the test methods present inside a test class using a separate instance of the
respective class with different set of data.
   @DataProvider - A test method that uses DataProvider will be executed the specific methods multiple number of times
   based on the data provided by the DataProvider . The test method will be executed using the same instance of the test
   class to which the test method belongs.


