*Q.1.Write the steps of high level design components according to the data flow from end to end ?*
High-Level Design Components Steps Based on Data Flow (End to End)
-> Identify Data Sources (Input Layer)
Determine where the data originates: user inputs, external APIs, sensors, databases, files, etc.
Define data formats and protocols for ingestion.

  Data Ingestion / Collection
Design components or services that capture or receive raw data from sources.
Examples: REST endpoints, message queues, streaming services, batch loaders.

 Data Validation & Preprocessing
Components to validate, clean, and transform data into a usable format.
Includes error handling, filtering, normalization, enrichment, and schema validation.

 Data Storage Layer
Choose appropriate storage solutions for processed/raw data: relational DBs, NoSQL, data lakes, caches.
Design schemas or storage models based on access patterns and scalability.

 Business Logic / Processing Layer
Implement core processing rules, computations, or workflows on the data.
Can include services, microservices, rule engines, or batch jobs.
May involve complex event processing, aggregations, or AI/ML models.

 Data Output / Serving Layer
Design APIs, reporting tools, dashboards, or other interfaces that serve processed data to consumers.
Ensure data is formatted and accessible as per client requirements.

 User Interface / Client Layer
Design front-end components, mobile apps, or third-party integrations that interact with output services.
Provide user-friendly data visualization or interaction models.

 Monitoring, Logging & Auditing
Incorporate components to track data flow health, performance metrics, and security audit trails.
Enables troubleshooting and compliance.

 Security & Access Control
Design authentication, authorization, encryption, and data privacy mechanisms across all components.
Scalability & Fault Tolerance
Architect for load balancing, failover, and redundancy to ensure continuous availability.

*‚úÖ Interview-Ready Answer (HR-Focused BroadOne App)*
Q: Can you describe the microservices you worked on in the BroadOne‚ÄìOne Stop Solution application at Broadridge
Answer:
In the BroadOne ‚Äì One Stop Solution project, the goal was to provide Broadridge employees with a unified platform
for accessing various HR and employee-related services like leave management, payroll, profile updates, and
document access.
I worked on developing and maintaining multiple backend microservices using Java with Spring Boot,
üîπ Microservices I Worked On:
Employee Profile Service
Manages employee master data such as contact details, employment history, job role, and reporting structure.
I developed APIs for profile retrieval and updates with proper validations and access control.

Leave & Attendance Service
Enables employees to apply for leave, view leave balances, and track attendance.
I implemented business logic for leave types, approval workflows, and integrated it with the holiday calendar
module.

HR Case Management Service
Allows employees to raise HR-related requests (e.g., payroll disputes, benefits queries) and track their
resolution.
I worked on ticket creation, status updates, and user-specific views for history and notifications.

Payroll & Compensation Service
Displays payslips, salary details, CTC breakdown, and tax deductions.
I focused on building secure endpoints to fetch and render sensitive payroll data.

Document Management Service
Provides access to official documents like offer letters, appraisal forms, tax forms, and experience certificates.
I developed secure file download features with user-based access rights.

Notification Service
Sends email or in-app notifications for approvals, reminders, and HR announcements.
I contributed to templating logic and ensured integration with the backend services for dynamic messaging.

Audit & Logging Service
Tracks user activities across the application for internal audits and compliance.
I helped implement structured logging and integrated it with a centralized log monitoring system.

üîπ Workflow Example:
When an employee logs in, the Employee Profile Service loads their details.
If they apply for leave, the Leave & Attendance Service handles the request and routes it to the manager for
approval.
Notifications are sent through the Notification Service.
Documents like payslips are available via the Document Management Service.
All interactions are recorded by the Audit Service.

üîπ My Role:
I worked on the backend using Java, Spring Boot, REST APIs, and MySQL, and followed best practices for logging,
security, and error handling.
I also collaborated closely with frontend developers and QA teams to ensure smooth API integration and functional
coverage.

*‚úÖ Q: What kind of authentication did you use in the BroadOne ‚Äì One Stop Solution app?* security
Answer:
In the BroadOne ‚Äì One Stop Solution application, we used JWT (JSON Web Token)-based authentication as part of our
stateless security implementation.
When a user logs in through the portal, their credentials are authenticated against our internal identity provider.
Upon successful login, a JWT token is generated and returned to the client.

This token is then passed in the header (Authorization: Bearer <token>) with every subsequent API request.
The backend microservices validate this token using a shared secret key before processing the request.
We also implemented role-based access control (RBAC) by embedding roles and privileges into the token claims,
which were used to control access to sensitive endpoints (like payroll, HR case management, etc.).

üîê Tech Stack Highlights:
Authentication Type: JWT-based token authentication
Security Framework: Spring Security
Token Storage: Stored in client-side (e.g., browser local storage or session cookies)
Validation: Token validated via secret key in middleware
Role Enforcement: Done via annotations like @PreAuthorize or @Secured

‚úÖ Q: Is JWT stateful or stateless? And based on what factors do you say that?
Answer:
JWT (JSON Web Token) is generally considered stateless, and here's why:
Once a JWT is issued to the client after login, it contains all necessary user information (like username, roles,
permissions, and expiry) in the token itself.
The server does not need to store any session data about the user. Instead, it simply verifies the token signature
on each request using a secret key or public/private key pair.
This makes the system stateless, as the server doesn't retain user session state in memory or a database.

üîç Key Points Supporting Statelessness:
‚úÖ No session or token storage on server-side
‚úÖ All user data is self-contained within the token (in claims)
‚úÖ Authentication is done purely by token validation
‚úÖ Scales well across distributed systems and microservices

üöß However (Important for Interviews):
JWT can become stateful if you implement token blacklisting, refresh tokens, or manual logout, because you now
have to store and check token status in a database or cache.
In such cases, you are managing state on the server side, which introduces partial statefulness.

üîö Conclusion:
So by default, JWT is stateless, but it can become stateful based on how you handle logout, token invalidation,
and refresh mechanisms.


‚úÖ Q7) What is OAuth and RBAC?
üîê OAuth (Open Authorization):
OAuth is an open standard for access delegation commonly used to grant websites or applications limited access
to user data without exposing user credentials.
It allows third-party applications to access resources on behalf of a user, typically using access tokens instead
of login credentials.

üî∏ Key Concepts:
Resource Owner ‚Äì the user
Client ‚Äì the third-party app requesting access
Authorization Server ‚Äì issues access tokens
Resource Server ‚Äì hosts protected APIs

üîπ Example:
If you sign into a third-party app using your Google login, you're using OAuth. Google acts as the Authorization
Server, and the app gets access to limited user information via a token ‚Äî not your password.

üîπ Used For:
Secure Single Sign-On (SSO)
Authorizing API access between services

üë• RBAC (Role-Based Access Control):
RBAC is a security model that restricts system access based on a user's role within an organization.
Instead of assigning permissions directly to users, they are assigned to roles, and users inherit permissions
from the roles they are assigned to.

üî∏ Example:
A user with the ROLE_ADMIN might have access to all endpoints.
A user with the ROLE_USER might only have read access.

üîπ In Code (Spring Security):
@PreAuthorize("hasRole('ADMIN')")
public ResponseEntity<?> getAllUsers() {
    // code
}
üîö Summary:
OAuth = Authorization protocol to securely share access across apps
RBAC = Access control mechanism based on user roles

‚úÖ Q7) What is OAuth and RBAC? (For Interview)
üîê 1. What is OAuth?
OAuth (Open Authorization) is a widely used authorization protocol that allows one application to access
resources from another application on behalf of a user, without sharing passwords.
‚úÖ Key Points for Interview:
OAuth provides access tokens to authorize API access.
It is mainly used for Single Sign-On (SSO) and third-party integrations.
It separates authentication and authorization.
OAuth works through an Authorization Server and a Resource Server.

üß† Example You Can Say:
"If you log into an app using your Google account, you're using OAuth. The app never sees your Google password;
it just receives a token from Google to access your profile."
üë• 2. What is RBAC (Role-Based Access Control)?
RBAC is a method for restricting access to resources based on user roles. Instead of assigning permissions to
each user individually, permissions are grouped into roles, and users are assigned those roles.
‚úÖ Key Points for Interview:
Users ‚Üí Roles ‚Üí Permissions
Helps enforce security, compliance, and least privilege access
Common roles: ADMIN, HR, USER, TRADER, etc.

üß† Example You Can Say:
"In our application, a user with the ROLE_HR could access employee data, while a user with ROLE_USER could only
view their own profile."
‚úÖ Example From Your Project (How You Used It):
"In our project, we used RBAC with Spring Security. Each API endpoint was protected using annotations like
@PreAuthorize("hasRole('ADMIN')") to restrict access based on the JWT token's role claims.
While we didn‚Äôt implement full OAuth in BroadOne, I‚Äôm familiar with its use in external integrations and
third-party authentication systems.

‚úÖ Q8) What is Encapsulation?
Encapsulation is an object-oriented programming (OOP) principle where you wrap data (variables) and methods
(functions) into a single unit, usually a class.
It also involves restricting direct access to some of an object‚Äôs components ‚Äî this is often achieved using
access modifiers like private, public, or protected.
Instead of exposing the internal workings, the class provides public methods (getters/setters or service methods)
as a controlled interface for other classes to interact with.

//Encapsulation hides complex implementation details by restricting direct access to the internal data and logic of
a class using access modifiers like private or protected.

How it works practically:
You declare fields as private, so other classes cannot access or modify them directly.
You create public methods that:
Validate inputs before changing data.
Perform complex logic internally but expose only the necessary outcome.
This way, the user of the class interacts with a simple API without worrying about internal complexities.

Example (Java):

public class OrderService {
    private List<Order> orders;  // hidden from outside

    // Public method exposing simple interface
    public void placeOrder(Order order) {
        if (validateOrder(order)) {
            // complex logic inside, hidden from caller
            processPayment(order);
            saveOrder(order);
        }
    }

    private boolean validateOrder(Order order) {
        // complex validation rules here
        return true;
    }

    private void processPayment(Order order) {
        // internal payment processing
    }

    private void saveOrder(Order order) {
        // save order to DB
    }
}
What to highlight in interview:
This hides complexity and improves maintainability.
Changes in internal logic don‚Äôt affect external callers.
Enhances security and data integrity by controlling access.

üéØ Interview Highlights:
Protects the internal state of an object.
Promotes data hiding.
Only allows access via getter and setter methods.

üß† Example (Java):
public class Employee {
    private String name; // private = hidden from outside classes

    public String getName() { return name; }   // getter
    public void setName(String name) { this.name = name; } // setter
}
‚úÖ You can mention:
‚ÄúIn our project, we used encapsulation to secure sensitive data like payroll details or user credentials by
exposing only necessary fields through getters/setters.‚Äù

‚úÖ Q9) What is Abstraction?
Abstraction is another core OOP concept that means hiding implementation details and showing only the essential
features to the user.
It helps in reducing complexity and allows the developer to focus on what an object does instead of how it does it.

üéØ Interview Highlights:
Focuses on functionality, not internal logic.
Achieved via interfaces and abstract classes in Java.
Makes code easier to maintain and extend.

üß† Example (Java):
interface Vehicle {
    void start();   // no implementation here
}

class Car implements Vehicle {
    public void start() {
        System.out.println("Car started");
    }
}
‚úÖ You can say:
‚ÄúWe used abstraction in service layer design by defining interfaces for microservices like OrderService or
LeaveService, which helped us decouple the implementation from the contract.‚Äù

üîö Summary:
Concept	Focus						Key 								Purpose
Encapsulation			How data is protected					Data hiding and control
Abstraction			What functionality is exposed			Reduce complexity and expose only essentials

‚úÖ Q10) What is Inheritance?
Inheritance is an OOP concept where a class (called a child or subclass) can inherit properties and behaviors
(fields and methods) from another class (called a parent or superclass).
It promotes code reusability, reduces redundancy, and supports hierarchical classification.

üéØ Interview Highlights:
extends keyword is used in Java.
Subclass can override parent methods (polymorphism).

Types: Single, Multilevel, Hierarchical (Java does not support multiple inheritance with classes).

üß† Example:
class Employee {
    void work() { System.out.println("Working..."); }
}

class Developer extends Employee {
    void code() { System.out.println("Coding..."); }
}
‚úÖ You can say:
‚ÄúIn our project, we had a base class User and extended it in multiple roles like Employee, Manager, and HRAdmin,
 allowing us to reuse and organize shared logic effectively.‚Äù

‚úÖ Q11) What is Polymorphism?
Polymorphism means "many forms". It allows objects to take on multiple behaviors depending on their context.
There are two types of polymorphism in Java:
Compile-time (Method Overloading)
Runtime (Method Overriding)

üéØ Interview Highlights:
Improves flexibility and maintainability.
Used heavily in frameworks, APIs, and real-time systems.

üß† Examples:
üîπ Compile-time Polymorphism (Overloading)-
class Calculator {
    int add(int a, int b) { return a + b; }
    double add(double a, double b) { return a + b; }
}
üîπ Runtime Polymorphism (Overriding):
class Employee {
    void work() { System.out.println("General work"); }
}

class Developer extends Employee {
    void work() { System.out.println("Coding"); }
}
‚úÖ You can say:
‚ÄúIn our application, we used runtime polymorphism in the service layer ‚Äî where different services implemented a
common interface but provided different business logic based on the user type or module.‚Äù

üîö Summary Table:
Concept	     				What it Means								Benefits
Inheritance			One class inherits another's features			Code reuse, hierarchy
Polymorphism		One interface, multiple implementations			Flexibility, method customization


‚úÖ Q11) Can you use the same access modifiers in both Abstraction and Encapsulation?
Answer:
Yes, you can use the same access modifiers like private, protected, and public in both Abstraction and
Encapsulation, but their purposes differ slightly in each concept.

Explanation:
Encapsulation focuses on hiding the internal data and implementation by using access modifiers (especially private)
to restrict direct access to variables and methods.

Abstraction focuses on hiding implementation details and showing only the necessary functionality, often using
abstract classes or interfaces.
In abstract classes, you can have protected or public methods and variables.
In interfaces (Java 8+), methods are usually public by default.
Example differences:
Concept				Typical Access Modifiers Used				Purpose of Access Modifiers
Encapsulation			private, protected, public				Control visibility of data members&helper methods
Abstraction			public, protected (in abstract classes),    Expose abstract methods publicly, hide concrete
					methods in interfaces are public				 details

Quick Summary:
Access modifiers work in both concepts to control visibility.
In Encapsulation, they mainly hide internal data.
In Abstraction, they mainly define what‚Äôs exposed to the user (abstract interface)


‚úÖ Detailed Difference: Abstract Class vs Interface
Abstract Class
To share common behavior and state among related classes
Can have both abstract methods (without body) and concrete methods (with body)
Not supported ‚Äî a class can extend only one abstract class
Can have instance variables with any access modifier (private, protected, public)
Can have constructors and can be called from subclasses
Methods and variables can have any access modifier
When classes share a base implementation or common state
Supports implementation inheritance
Base class Vehicle provides common fields and methods; subclasses like Car and Bike inherit and override

Interface
To define a contract or capability for classes, unrelated classes can implement the same interface
Before Java 8: only abstract methods; Since Java 8: can have default and static methods with implementation
Supported ‚Äî a class can implement multiple interfaces
Can only have public static final constants(i.e., variables are implicitly public static final)
Cannot have constructors
Methods are implicitly public (cannot be private/protected), variables are public static final
When you want to specify that a class should have certain behaviors without forcing inheritance
Supports interface inheritance (behavior contract)
Interfaces like Drivable, Flyable define capabilities any class can implement, regardless of hierarchy

Real-world Scenario:
Abstract Class:
Imagine you have an app modeling employees. An abstract class Employee could provide common methods like
calculateSalary() and hold common fields like employeeId. Different types like Manager, Developer extend Employee
and provide specific implementations.

Interface:
You might have interfaces like Payable, Reportable, Trainable that can be implemented by unrelated classes
(an Employee can be Payable, but so can a Contractor or Vendor),focusing on what they can do, not what they are.

Bonus Interview Tip:
"I prefer abstract classes when I want to share code and state between closely related classes, and interfaces
when I want to enforce a contract on classes possibly from unrelated hierarchies. Also, Java 8+ interfaces can
have default methods, allowing some shared implementation."

‚úÖ Q13) We already have abstract methods in abstract classes, then what is the purpose of Interfaces?
Answer:
While abstract classes can have abstract methods and provide partial implementation, interfaces serve a different
and complementary purpose in Java:

Multiple Inheritance:
Java does not support multiple inheritance of classes (including abstract classes), but a class can implement
multiple interfaces. This allows a class to inherit behavior contracts from multiple sources.

Pure Abstraction & Contract:
Interfaces define a pure contract ‚Äî they specify what methods a class must implement, without any assumption
about class hierarchy or state.

Decoupling & Flexibility:
Interfaces allow loose coupling between components.Different unrelated classes can implement the same interface,
enabling polymorphism without inheritance.

Default Methods (since Java 8):
Interfaces can now provide default method implementations, which lets you evolve APIs without breaking existing
code, while still keeping a contract.

Focus on Capability, Not Identity:
Abstract classes describe what an object is, while interfaces describe what an object can do.

Example:
Abstract class example:
abstract class Animal { abstract void sound(); }

Interface example:
interface Flyable { void fly(); }

A class can extend only one abstract class but implement many interfaces:
class Bird extends Animal implements Flyable, Runnable {
    void sound() { System.out.println("Chirp"); }
    public void fly() { System.out.println("Flying"); }
    public void run() { System.out.println("Running"); }
}

Quick Summary:
Aspect						Abstract Class						Interface
Multiple inheritance			No							Yes (can implement multiple)
Nature					Partial abstraction + state			Pure abstraction (behavior contract)
Relationship	     ‚ÄúIs-a‚Äù relationship (class hierarchy)	   Capability/role


‚úÖ Q14) By extending interfaces, how can you achieve 100% abstraction?
Answer:
In Java, an interface provides a 100% abstraction by declaring only method signatures without any implementation
(except default/static methods since Java 8, which do not affect abstraction level).
When one interface extends another interface,it inherits all abstract method signatures from the parent interface(s)
without providing implementation, thereby continuing to define only what must be done, not how.

How extending interfaces helps:
When an interface extends one or more interfaces, it combines all the abstract method contracts from its parent
interfaces.
The child interface still does not provide any method implementations, so it remains fully abstract.
Any class implementing the child interface must provide implementations for all inherited abstract methods.
This allows building complex contracts from simple, reusable interfaces while maintaining 100% abstraction.

Example:
interface A {
    void methodA();
}
interface B {
    void methodB();
}
interface C extends A, B {
    void methodC();
}

C inherits all methods from A and B (methodA(), methodB()) plus its own (methodC()).
C remains fully abstract (no implementations).
Any class implementing C must implement all three methods ‚Äî achieving 100% abstraction.

Summary:
Point											Explanation
Interface methods						Abstract by default (no body)
Extending interfaces					Combines abstract methods
Implementation responsibility			Concrete classes implement all methods
Result									Full abstraction through interface inheritance

‚úÖ Q15) What is Multiple Inheritance?
Answer:
Multiple inheritance is a feature of object-oriented programming where a class can inherit properties and
behaviors from more than one parent class.

Important points:
It allows a class to reuse code and combine functionalities from multiple base classes.
In languages like C++, multiple inheritance of classes is supported directly.
Java does NOT support multiple inheritance with classes to avoid ambiguity problems (like the Diamond Problem).
However, Java supports multiple inheritance through interfaces, meaning a class can implement multiple interfaces.

Example in Java using interfaces:

interface Printable {
    void print();
}

interface Showable {
    void show();
}

class Document implements Printable, Showable {
    public void print() {
        System.out.println("Printing document");
    }
    public void show() {
        System.out.println("Showing document");
    }
}

Why Java avoids multiple class inheritance?
To prevent ambiguity when two parent classes have methods with the same signature.
To keep the language simpler and safer.

Quick Summary Table:
Aspect				Multiple Inheritance via Classes (Not in Java)		Multiple Inheritance via Interfaces (Java)
Supported in Java?			No													Yes
Ambiguity issues	Yes (Diamond problem)									No (interfaces have no state)
Use case		Combine functionality from multiple base classes	 Define multiple capabilities/contracts

Diamond Problem-
‚úÖ What is the Diamond Problem?
The Diamond Problem is an ambiguity that arises in multiple inheritance when a class inherits from two classes
that both inherit from the same base class. This forms a diamond-shaped inheritance diagram.

Why is it a problem?
The child class inherits the same method or property from two paths.
The compiler (or runtime) becomes confused about which version to use.
This can lead to ambiguity and inconsistency.

Diamond Problem Diagram:
       A
      / \
     B   C
      \ /
       D
Classes B and C inherit from A.
Class D inherits from both B and C.

If A has a method show(), and both B and C override it, then D faces ambiguity:
Which show() method should it inherit ‚Äî from B or C?

How does Java avoid this?
Java does not allow multiple inheritance of classes.
Instead, it supports multiple inheritance of interfaces, which do not have method implementations with state.
This avoids the ambiguity problem.

Multiple Inheritance with Interfaces in Java (No diamond problem):

interface A {
    void show();
}

interface B extends A {
    default void show() {
        System.out.println("B's show");
    }
}

interface C extends A {
    default void show() {
        System.out.println("C's show");
    }
}

class D implements B, C {
    // Must override show() to resolve conflict
    public void show() {
        B.super.show(); // or C.super.show();
    }
}
Java forces D to explicitly choose which default method to use, removing ambiguity.

Summary for interview:
The Diamond Problem is ambiguity in multiple inheritance when the same method is inherited from multiple paths.
Java avoids this problem by not allowing multiple class inheritance and instead uses interfaces.
When interfaces have conflicting default methods, Java forces the class to resolve the conflict explicitly.


‚úÖ Q17) If I add a new method to an existing interface that is implemented by multiple classes (e.g., Ram, Sai,etc.),
what happens?
Answer:
If you add a new abstract method to an existing interface in Java, and that interface is already implemented by
6‚Äì7 classes, then:
All the implementing classes will break immediately (i.e., they won‚Äôt compile).
Why? Because they are contractually bound to implement all abstract methods in the interface.
Adding a new method changes the contract ‚Äî so every implementing class must now provide an implementation for the
newly added method.

üî¥ Example (Without default keyword):
interface MyInterface {
    void existingMethod();
    // Let's add this new method
    void newMethod(); // All classes must now implement this
}

class Ram implements MyInterface {
    public void existingMethod() { }
    // ‚ùå This will break unless you implement newMethod()
}
So in this case, you‚Äôll have to modify each implementing class and provide an implementation for newMethod().

‚úÖ How to avoid breaking classes?
Use default methods introduced in Java 8.

‚úÖ Solution ‚Äì Use default method:
interface MyInterface {
    void existingMethod();

    default void newMethod() {
        // Default behavior
        System.out.println("Default implementation");
    }
}
Now, the existing classes (Ram, Sai, etc.) won‚Äôt break, because they inherit the default implementation.
If they want to override it, they can ‚Äî but they‚Äôre not forced to.

Interview Tip:
‚ÄúIf backward compatibility is important and the interface is widely implemented, I prefer to use default methods
to avoid breaking existing implementations.‚Äù

*‚úÖ Q20) What is a String Pool in Java?*
Answer:
The String Pool in Java is a special memory area in the heap (part of the method area) where Java stores string
literals to optimize memory usage and improve performance.

When you create a string literal like:
String s1 = "Hello";
String s2 = "Hello";
Both s1 and s2 refer to the same object in the String pool, not two separate objects. Java reuses the string from
the pool instead of creating a new one.
Strings are immutable in Java.
Reusing existing objects saves memory and improves performance.
Avoids duplicate string objects in memory.
üîÅ Example:
String s1 = "Java";
String s2 = "Java";
System.out.println(s1 == s2); // true (same reference from pool)

But if you use new keyword:
String s3 = new String("Java");
System.out.println(s1 == s3); // false (different memory, not from pool)

üß† Bonus: Interning a String
You can force a String object into the pool using the .intern() method:
String s4 = new String("Java").intern();
System.out.println(s1 == s4); // true
üìå Summary for Interview:
The String Pool helps in memory optimization by reusing string literals.
It's part of the method area (stored in the heap in Java 8+).
Only string literals go into the pool automatically.
Use .intern() to manually place a string in the pool.

*süî∑ 1. What is a String Literal?*
A string literal is any string value written directly in your code within double quotes.
üßæ Example:

String str1 = "Hello"; // "Hello" is a string literal
String literals are automatically stored in the String Pool.
If another variable is assigned "Hello", Java reuses the same object from the pool.

*üî∑ 2. What is the String Pool in Java?*
The String Pool (also called the intern pool) is a special memory region inside the heap that stores unique string
literals.It avoids duplicate String objects by reusing existing ones.
It‚Äôs possible because Strings are immutable in Java.

üí° Why is this useful?
‚úÖ Memory efficiency
‚úÖ Performance improvement
‚úÖ Reference comparison using == becomes possible for string literals

üîÅ How it works:
String s1 = "Java";
String s2 = "Java";

System.out.println(s1 == s2);  // ‚úÖ true, both point to same object in String pool
But:
String s3 = new String("Java");
System.out.println(s1 == s3);  // ‚ùå false, because s3 is created in heap (not pool)
üîß Using .intern() Method:
You can force any string to be added to the String Pool:
String s4 = new String("Java").intern();
System.out.println(s1 == s4);  // ‚úÖ true, because s4 is now interned
üß† Diagram:
Heap Memory
‚îú‚îÄ‚îÄ String Pool
‚îÇ   ‚îî‚îÄ‚îÄ "Java" ‚Üê shared by all string literals with same value
‚îÇ
‚îú‚îÄ‚îÄ new String("Java") ‚Üê separate object (not pooled)

üß© Summary Table:
Concept								Description
String Literal					"Hello" ‚Äî automatically stored in the String Pool
String Pool						Memory area that stores and reuses string literals
.intern()						Manually adds a string to the pool
Immutable String				Makes pooling possible and safe


üîπ Q1: What is the difference between == and .equals() for Strings in Java?
Answer:
== checks reference equality (whether both variables point to the same memory location).
.equals() checks value/content equality.

String s1 = "Java";
String s2 = "Java";
System.out.println(s1 == s2);        // true
System.out.println(s1.equals(s2));   // true

String s3 = new String("Java");
System.out.println(s1 == s3);        // false
System.out.println(s1.equals(s3));   // true

üîπ Q7: What is the role of .intern() in memory optimization?
Answer:
.intern() checks if the string already exists in the String pool:
If yes ‚Üí returns the existing reference.
If no ‚Üí adds it to the pool and returns the pooled reference.
This reduces memory usage when the same string is created multiple times.

‚úÖ Q21) Why do we convert int to Integer (or primitive to wrapper)? What‚Äôs the purpose?
üî∑ Purpose of converting int (primitive) to Integer (wrapper):
Interview Tip üí°:
Java has two types:
Primitive types: int, char, boolean, etc.
Wrapper classes: Integer, Character, Boolean, etc.
"We convert primitives to wrapper classes mainly to work with Java collections, enable null support, and leverage
object-oriented features like methods and polymorphism."

‚úÖ Reasons for conversion:
1. Using with Collections (like ArrayList, HashMap, etc.)
Java collections (like ArrayList, HashMap) do not support primitives ‚Äî they only work with objects.

List<Integer> list = new ArrayList<>();
list.add(10); // int is auto-boxed to Integer
So, if you want to store an int in a collection, you must convert it to Integer.

2. Object-Oriented Features
You cannot call methods on primitives, but you can on wrapper classes.
int x = 10;
Integer y = Integer.valueOf(x); // convert to object
System.out.println(y.toString()); // now you can call methods

3. Nullability
Primitives cannot hold null, but wrapper classes can.
Integer a = null;  // valid
int b = null;      // ‚ùå compile-time error
Useful in scenarios like:

Optional fields
Database operations (where null is common)

4. Autoboxing and Unboxing (Java 5+)
Java automatically converts:
int ‚Üí Integer ‚Üí autoboxing
Integer ‚Üí int ‚Üí unboxing

Integer obj = 5;  // autoboxing
int num = obj;    // unboxing
You don‚Äôt need to convert manually, Java does it behind the scenes.

‚úÖ Q22) Why can't you use primitive data types in a collection? Why do you convert them into objects (like Integer, Double, etc.)?
üî∑ Answer
In Java, collections (like ArrayList, HashMap, etc.) can only store objects, not primitive types like int, char,
double, etc.
That‚Äôs because:
Java collections are part of the Java Collections Framework, which is object-oriented.
Collections are generic classes (like List<T>, Map<K, V>) ‚Äî and generics only work with reference types (objects),
not primitives.

üî¥ Why primitives can‚Äôt be used directly?
Primitives are not objects ‚Äî they don‚Äôt have behavior or class structure. So:
List<int> myList = new ArrayList<>(); // ‚ùå Compilation error
Instead, you must use their wrapper class equivalents:
List<Integer> myList = new ArrayList<>(); // ‚úÖ Works fine
myList.add(10); // Java auto-boxes int ‚Üí Integer
üîÅ Conversion is necessary (int ‚Üí Integer)
Java provides wrapper classes for each primitive:
Primitive		Wrapper Class
int				Integer
char			Character
boolean			Boolean
double			Double

üîÑ Autoboxing makes it seamless:
Since Java 5, autoboxing and unboxing automatically convert between primitive and wrapper types.

List<Integer> numbers = new ArrayList<>();
numbers.add(5); // autoboxes int to Integer
int x = numbers.get(0); // unboxes Integer to int
You don‚Äôt need to manually convert every time.

üìå Summary for Interview:
Collections only accept objects, not primitives.
Wrapper classes (like Integer, Double) are used to bridge the gap.
Autoboxing/unboxing makes this seamless.
Wrapper classes also enable:null values
method usage (Integer.parseInt(), toString(), etc.)

üí¨ Interview Tip:
‚ÄúJava collections work with objects to support features like generics, polymorphism, and method calls. Since
primitives lack these, we use their wrapper classes instead, and Java handles conversion automatically through
autoboxing.‚Äù

‚úÖ Q23) What are Generics in Java?
üî∑ Definition:
Generics in Java allow you to write type-safe, reusable code. They enable you to define classes, interfaces, and
methods with a placeholder for the type of data they operate on.

"Generics let you write one piece of code that works with any data type while making sure you don‚Äôt make mistakes
like putting a number in a list meant for names."

Interview Tip-
"Generics let us write flexible code while ensuring type safety. It‚Äôs widely used in Java‚Äôs Collections Framework
to prevent runtime ClassCastException and improve readability."

üí¨ Example Interview Answer:
"Generics in Java allow us to create classes, methods, and collections that can work with any data type in a
type-safe way. This avoids runtime errors and unnecessary casting. For example, List<String> will only accept
Strings, and not allow adding any other type."

üî§ Example: Without Generics
List list = new ArrayList();  // Raw type
list.add("Hello");
list.add(123);  // No error at compile-time

String s = (String) list.get(1);  // Runtime error (ClassCastException)
‚úÖ With Generics (Type Safety)
List<String> list = new ArrayList<>();
list.add("Hello");
// list.add(123);  ‚ùå Compile-time error

String s = list.get(0);  // No casting needed

üîß Generic Class Example:
class Box<T> {
    private T item;

    public void set(T item) {
        this.item = item;
    }

    public T get() {
        return item;
    }
}
Usage:
Box<String> stringBox = new Box<>();
stringBox.set("Java");

Box<Integer> intBox = new Box<>();
intBox.set(10);

üß† What is <T>?
It‚Äôs a placeholder for a data type.
When you write Box<String>, T becomes String.
When you write Box<Integer>, T becomes Integer.
public <T> void printItem(T item) {
    System.out.println(item);
}

